'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var block = require('../blots/block.js');
var _break = require('../blots/break.js');
var cursor = require('../blots/cursor.js');
var inline = require('../blots/inline.js');
var text = require('../blots/text.js');
var container = require('../blots/container.js');
var quill = require('../core/quill.js');

class CodeBlockContainer extends container.default {
  static create(value) {
    const domNode = super.create(value);
    domNode.setAttribute('spellcheck', 'false');
    return domNode;
  }
  code(index, length) {
    return this.children
    // @ts-expect-error
    .map(child => child.length() <= 1 ? '' : child.domNode.innerText).join('\n').slice(index, index + length);
  }
  html(index, length) {
    // `\n`s are needed in order to support empty lines at the beginning and the end.
    // https://html.spec.whatwg.org/multipage/syntax.html#element-restrictions
    return `<pre>\n${text.escapeText(this.code(index, length))}\n</pre>`;
  }
}
class CodeBlock extends block.default {
  static TAB = '  ';
  static register() {
    quill.default.register(CodeBlockContainer);
  }
}
class Code extends inline.default {}
Code.blotName = 'code';
Code.tagName = 'CODE';
CodeBlock.blotName = 'code-block';
CodeBlock.className = 'ql-code-block';
CodeBlock.tagName = 'DIV';
CodeBlockContainer.blotName = 'code-block-container';
CodeBlockContainer.className = 'ql-code-block-container';
CodeBlockContainer.tagName = 'DIV';
CodeBlockContainer.allowedChildren = [CodeBlock];
CodeBlock.allowedChildren = [text.default, _break.default, cursor.default];
CodeBlock.requiredContainer = CodeBlockContainer;

exports.Code = Code;
exports.CodeBlockContainer = CodeBlockContainer;
exports.default = CodeBlock;
