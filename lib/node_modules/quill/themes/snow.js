'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../../lodash-es/_baseGetTag.js');
require('../../lodash-es/_baseToString.js');
require('../../lodash-es/_metaMap.js');
require('../../lodash-es/_root.js');
require('../../lodash-es/_LazyWrapper.js');
require('../../lodash-es/wrapperLodash.js');
require('../../lodash-es/_defineProperty.js');
require('../../lodash-es/assign.js');
require('../../lodash-es/assignIn.js');
require('../../lodash-es/assignInWith.js');
require('../../lodash-es/assignWith.js');
require('../../lodash-es/at.js');
require('../../lodash-es/attempt.js');
require('../../lodash-es/bind.js');
require('../../lodash-es/bindAll.js');
require('../../lodash-es/bindKey.js');
require('../../lodash-es/_createRound.js');
require('../../lodash-es/_baseClone.js');
require('../../lodash-es/_LodashWrapper.js');
require('../../lodash-es/_isFlattenable.js');
require('../../lodash-es/_Stack.js');
require('../../lodash-es/_SetCache.js');
require('../../lodash-es/_equalByTag.js');
require('../../lodash-es/isArguments.js');
require('../../lodash-es/isBuffer.js');
require('../../lodash-es/isTypedArray.js');
require('../../lodash-es/_getTag.js');
require('../../lodash-es/_stringToPath.js');
require('../../lodash-es/curry.js');
require('../../lodash-es/curryRight.js');
require('../../lodash-es/defaults.js');
require('../../lodash-es/defaultsDeep.js');
require('../../lodash-es/defer.js');
require('../../lodash-es/delay.js');
require('../../lodash-es/difference.js');
require('../../lodash-es/differenceBy.js');
require('../../lodash-es/differenceWith.js');
require('../../lodash-es/flow.js');
require('../../lodash-es/flowRight.js');
require('../../lodash-es/intersection.js');
require('../../lodash-es/intersectionBy.js');
require('../../lodash-es/intersectionWith.js');
require('../../lodash-es/invoke.js');
require('../../lodash-es/invokeMap.js');
require('../../lodash-es/isArrayBuffer.js');
require('../../lodash-es/isDate.js');
require('../../lodash-es/isPlainObject.js');
require('../../lodash-es/isFinite.js');
require('../../lodash-es/isMap.js');
require('../../lodash-es/_baseIsNative.js');
require('../../lodash-es/_coreJsData.js');
require('../../lodash-es/isRegExp.js');
require('../../lodash-es/isSet.js');
require('../../lodash-es/memoize.js');
var merge = require('../../lodash-es/merge.js');
require('../../lodash-es/mergeWith.js');
require('../../lodash-es/method.js');
require('../../lodash-es/methodOf.js');
require('../../lodash-es/toArray.js');
require('../../lodash-es/omit.js');
require('../../lodash-es/over.js');
require('../../lodash-es/overArgs.js');
require('../../lodash-es/overEvery.js');
require('../../lodash-es/overSome.js');
require('../../lodash-es/parseInt.js');
require('../../lodash-es/partial.js');
require('../../lodash-es/partialRight.js');
require('../../lodash-es/pick.js');
require('../../lodash-es/pull.js');
require('../../lodash-es/pullAt.js');
require('../../lodash-es/rearg.js');
require('../../lodash-es/sortBy.js');
require('../../lodash-es/union.js');
require('../../lodash-es/unionBy.js');
require('../../lodash-es/unionWith.js');
require('../../lodash-es/_createSet.js');
require('../../lodash-es/without.js');
require('../../lodash-es/wrapperAt.js');
require('../../lodash-es/xor.js');
require('../../lodash-es/xorBy.js');
require('../../lodash-es/xorWith.js');
require('../../lodash-es/zip.js');
require('../../lodash-es/zipWith.js');
require('../../lodash-es/lodash.default.js');
var emitter = require('../core/emitter.js');
var base = require('./base.js');
var link = require('../formats/link.js');
var selection = require('../core/selection.js');
var icons = require('../ui/icons.js');

const TOOLBAR_CONFIG = [[{
  header: ['1', '2', '3', false]
}], ['bold', 'italic', 'underline', 'link'], [{
  list: 'ordered'
}, {
  list: 'bullet'
}], ['clean']];
class SnowTooltip extends base.BaseTooltip {
  static TEMPLATE = ['<a class="ql-preview" rel="noopener noreferrer" target="_blank" href="about:blank"></a>', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-action"></a>', '<a class="ql-remove"></a>'].join('');
  preview = this.root.querySelector('a.ql-preview');
  listen() {
    super.listen();
    // @ts-expect-error Fix me later
    this.root.querySelector('a.ql-action').addEventListener('click', event => {
      if (this.root.classList.contains('ql-editing')) {
        this.save();
      } else {
        // @ts-expect-error Fix me later
        this.edit('link', this.preview.textContent);
      }
      event.preventDefault();
    });
    // @ts-expect-error Fix me later
    this.root.querySelector('a.ql-remove').addEventListener('click', event => {
      if (this.linkRange != null) {
        const range = this.linkRange;
        this.restoreFocus();
        this.quill.formatText(range, 'link', false, emitter.default.sources.USER);
        delete this.linkRange;
      }
      event.preventDefault();
      this.hide();
    });
    this.quill.on(emitter.default.events.SELECTION_CHANGE, (range, oldRange, source) => {
      if (range == null) return;
      if (range.length === 0 && source === emitter.default.sources.USER) {
        const [link$1, offset] = this.quill.scroll.descendant(link.default, range.index);
        if (link$1 != null) {
          this.linkRange = new selection.Range(range.index - offset, link$1.length());
          const preview = link.default.formats(link$1.domNode);
          // @ts-expect-error Fix me later
          this.preview.textContent = preview;
          // @ts-expect-error Fix me later
          this.preview.setAttribute('href', preview);
          this.show();
          const bounds = this.quill.getBounds(this.linkRange);
          if (bounds != null) {
            this.position(bounds);
          }
          return;
        }
      } else {
        delete this.linkRange;
      }
      this.hide();
    });
  }
  show() {
    super.show();
    this.root.removeAttribute('data-mode');
  }
}
class SnowTheme extends base.default {
  constructor(quill, options) {
    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
      options.modules.toolbar.container = TOOLBAR_CONFIG;
    }
    super(quill, options);
    this.quill.container.classList.add('ql-snow');
  }
  extendToolbar(toolbar) {
    if (toolbar.container != null) {
      toolbar.container.classList.add('ql-snow');
      this.buildButtons(toolbar.container.querySelectorAll('button'), icons.default);
      this.buildPickers(toolbar.container.querySelectorAll('select'), icons.default);
      // @ts-expect-error
      this.tooltip = new SnowTooltip(this.quill, this.options.bounds);
      if (toolbar.container.querySelector('.ql-link')) {
        this.quill.keyboard.addBinding({
          key: 'k',
          shortKey: true
        }, (_range, context) => {
          toolbar.handlers.link.call(toolbar, !context.format.link);
        });
      }
    }
  }
}
SnowTheme.DEFAULTS = merge.default({}, base.default.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        link(value) {
          if (value) {
            const range = this.quill.getSelection();
            if (range == null || range.length === 0) return;
            let preview = this.quill.getText(range);
            if (/^\S+@\S+\.\S+$/.test(preview) && preview.indexOf('mailto:') !== 0) {
              preview = `mailto:${preview}`;
            }
            const {
              tooltip
            } = this.quill.theme;
            tooltip.edit('link', preview);
          } else {
            this.quill.format('link', false);
          }
        }
      }
    }
  }
});

exports.default = SnowTheme;
