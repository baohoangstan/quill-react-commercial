'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../../lodash-es/_baseGetTag.js');
require('../../lodash-es/_baseToString.js');
require('../../lodash-es/_metaMap.js');
require('../../lodash-es/_root.js');
require('../../lodash-es/_LazyWrapper.js');
require('../../lodash-es/wrapperLodash.js');
require('../../lodash-es/_defineProperty.js');
require('../../lodash-es/assign.js');
require('../../lodash-es/assignIn.js');
require('../../lodash-es/assignInWith.js');
require('../../lodash-es/assignWith.js');
require('../../lodash-es/at.js');
require('../../lodash-es/attempt.js');
require('../../lodash-es/bind.js');
require('../../lodash-es/bindAll.js');
require('../../lodash-es/bindKey.js');
require('../../lodash-es/_createRound.js');
require('../../lodash-es/_baseClone.js');
require('../../lodash-es/_LodashWrapper.js');
require('../../lodash-es/_isFlattenable.js');
require('../../lodash-es/_Stack.js');
require('../../lodash-es/_SetCache.js');
require('../../lodash-es/_equalByTag.js');
require('../../lodash-es/isArguments.js');
require('../../lodash-es/isBuffer.js');
require('../../lodash-es/isTypedArray.js');
require('../../lodash-es/_getTag.js');
require('../../lodash-es/_stringToPath.js');
require('../../lodash-es/curry.js');
require('../../lodash-es/curryRight.js');
require('../../lodash-es/defaults.js');
require('../../lodash-es/defaultsDeep.js');
require('../../lodash-es/defer.js');
require('../../lodash-es/delay.js');
require('../../lodash-es/difference.js');
require('../../lodash-es/differenceBy.js');
require('../../lodash-es/differenceWith.js');
require('../../lodash-es/flow.js');
require('../../lodash-es/flowRight.js');
require('../../lodash-es/intersection.js');
require('../../lodash-es/intersectionBy.js');
require('../../lodash-es/intersectionWith.js');
require('../../lodash-es/invoke.js');
require('../../lodash-es/invokeMap.js');
require('../../lodash-es/isArrayBuffer.js');
require('../../lodash-es/isDate.js');
require('../../lodash-es/isPlainObject.js');
require('../../lodash-es/isFinite.js');
require('../../lodash-es/isMap.js');
require('../../lodash-es/_baseIsNative.js');
require('../../lodash-es/_coreJsData.js');
require('../../lodash-es/isRegExp.js');
require('../../lodash-es/isSet.js');
require('../../lodash-es/memoize.js');
var merge = require('../../lodash-es/merge.js');
require('../../lodash-es/mergeWith.js');
require('../../lodash-es/method.js');
require('../../lodash-es/methodOf.js');
require('../../lodash-es/toArray.js');
require('../../lodash-es/omit.js');
require('../../lodash-es/over.js');
require('../../lodash-es/overArgs.js');
require('../../lodash-es/overEvery.js');
require('../../lodash-es/overSome.js');
require('../../lodash-es/parseInt.js');
require('../../lodash-es/partial.js');
require('../../lodash-es/partialRight.js');
require('../../lodash-es/pick.js');
require('../../lodash-es/pull.js');
require('../../lodash-es/pullAt.js');
require('../../lodash-es/rearg.js');
require('../../lodash-es/sortBy.js');
require('../../lodash-es/union.js');
require('../../lodash-es/unionBy.js');
require('../../lodash-es/unionWith.js');
require('../../lodash-es/_createSet.js');
require('../../lodash-es/without.js');
require('../../lodash-es/wrapperAt.js');
require('../../lodash-es/xor.js');
require('../../lodash-es/xorBy.js');
require('../../lodash-es/xorWith.js');
require('../../lodash-es/zip.js');
require('../../lodash-es/zipWith.js');
require('../../lodash-es/lodash.default.js');
var emitter = require('../core/emitter.js');
var theme = require('../core/theme.js');
var colorPicker = require('../ui/color-picker.js');
var iconPicker = require('../ui/icon-picker.js');
var picker = require('../ui/picker.js');
var tooltip = require('../ui/tooltip.js');

const ALIGNS = [false, 'center', 'right', 'justify'];
const COLORS = ['#000000', '#e60000', '#ff9900', '#ffff00', '#008a00', '#0066cc', '#9933ff', '#ffffff', '#facccc', '#ffebcc', '#ffffcc', '#cce8cc', '#cce0f5', '#ebd6ff', '#bbbbbb', '#f06666', '#ffc266', '#ffff66', '#66b966', '#66a3e0', '#c285ff', '#888888', '#a10000', '#b26b00', '#b2b200', '#006100', '#0047b2', '#6b24b2', '#444444', '#5c0000', '#663d00', '#666600', '#003700', '#002966', '#3d1466'];
const FONTS = [false, 'serif', 'monospace'];
const HEADERS = ['1', '2', '3', false];
const SIZES = ['small', false, 'large', 'huge'];
class BaseTheme extends theme.default {
  constructor(quill, options) {
    super(quill, options);
    const listener = e => {
      if (!document.body.contains(quill.root)) {
        document.body.removeEventListener('click', listener);
        return;
      }
      if (this.tooltip != null &&
      // @ts-expect-error
      !this.tooltip.root.contains(e.target) &&
      // @ts-expect-error
      document.activeElement !== this.tooltip.textbox && !this.quill.hasFocus()) {
        this.tooltip.hide();
      }
      if (this.pickers != null) {
        this.pickers.forEach(picker => {
          // @ts-expect-error
          if (!picker.container.contains(e.target)) {
            picker.close();
          }
        });
      }
    };
    quill.emitter.listenDOM('click', document.body, listener);
  }
  addModule(name) {
    const module = super.addModule(name);
    if (name === 'toolbar') {
      // @ts-expect-error
      this.extendToolbar(module);
    }
    return module;
  }
  buildButtons(buttons, icons) {
    Array.from(buttons).forEach(button => {
      const className = button.getAttribute('class') || '';
      className.split(/\s+/).forEach(name => {
        if (!name.startsWith('ql-')) return;
        name = name.slice('ql-'.length);
        if (icons[name] == null) return;
        if (name === 'direction') {
          // @ts-expect-error
          button.innerHTML = icons[name][''] + icons[name].rtl;
        } else if (typeof icons[name] === 'string') {
          // @ts-expect-error
          button.innerHTML = icons[name];
        } else {
          // @ts-expect-error
          const value = button.value || '';
          // @ts-expect-error
          if (value != null && icons[name][value]) {
            // @ts-expect-error
            button.innerHTML = icons[name][value];
          }
        }
      });
    });
  }
  buildPickers(selects, icons) {
    this.pickers = Array.from(selects).map(select => {
      if (select.classList.contains('ql-align')) {
        if (select.querySelector('option') == null) {
          fillSelect(select, ALIGNS);
        }
        if (typeof icons.align === 'object') {
          return new iconPicker.default(select, icons.align);
        }
      }
      if (select.classList.contains('ql-background') || select.classList.contains('ql-color')) {
        const format = select.classList.contains('ql-background') ? 'background' : 'color';
        if (select.querySelector('option') == null) {
          fillSelect(select, COLORS, format === 'background' ? '#ffffff' : '#000000');
        }
        return new colorPicker.default(select, icons[format]);
      }
      if (select.querySelector('option') == null) {
        if (select.classList.contains('ql-font')) {
          fillSelect(select, FONTS);
        } else if (select.classList.contains('ql-header')) {
          fillSelect(select, HEADERS);
        } else if (select.classList.contains('ql-size')) {
          fillSelect(select, SIZES);
        }
      }
      return new picker.default(select);
    });
    const update = () => {
      this.pickers.forEach(picker => {
        picker.update();
      });
    };
    this.quill.on(emitter.default.events.EDITOR_CHANGE, update);
  }
}
BaseTheme.DEFAULTS = merge.default({}, theme.default.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        formula() {
          this.quill.theme.tooltip.edit('formula');
        },
        image() {
          let fileInput = this.container.querySelector('input.ql-image[type=file]');
          if (fileInput == null) {
            fileInput = document.createElement('input');
            fileInput.setAttribute('type', 'file');
            fileInput.setAttribute('accept', this.quill.uploader.options.mimetypes.join(', '));
            fileInput.classList.add('ql-image');
            fileInput.addEventListener('change', () => {
              const range = this.quill.getSelection(true);
              this.quill.uploader.upload(range, fileInput.files);
              fileInput.value = '';
            });
            this.container.appendChild(fileInput);
          }
          fileInput.click();
        },
        video() {
          this.quill.theme.tooltip.edit('video');
        }
      }
    }
  }
});
class BaseTooltip extends tooltip.default {
  constructor(quill, boundsContainer) {
    super(quill, boundsContainer);
    this.textbox = this.root.querySelector('input[type="text"]');
    this.listen();
  }
  listen() {
    // @ts-expect-error Fix me later
    this.textbox.addEventListener('keydown', event => {
      if (event.key === 'Enter') {
        this.save();
        event.preventDefault();
      } else if (event.key === 'Escape') {
        this.cancel();
        event.preventDefault();
      }
    });
  }
  cancel() {
    this.hide();
    this.restoreFocus();
  }
  edit() {
    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'link';
    let preview = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    this.root.classList.remove('ql-hidden');
    this.root.classList.add('ql-editing');
    if (this.textbox == null) return;
    if (preview != null) {
      this.textbox.value = preview;
    } else if (mode !== this.root.getAttribute('data-mode')) {
      this.textbox.value = '';
    }
    const bounds = this.quill.getBounds(this.quill.selection.savedRange);
    if (bounds != null) {
      this.position(bounds);
    }
    this.textbox.select();
    this.textbox.setAttribute('placeholder', this.textbox.getAttribute(`data-${mode}`) || '');
    this.root.setAttribute('data-mode', mode);
  }
  restoreFocus() {
    this.quill.focus({
      preventScroll: true
    });
  }
  save() {
    // @ts-expect-error Fix me later
    let {
      value
    } = this.textbox;
    switch (this.root.getAttribute('data-mode')) {
      case 'link':
        {
          const {
            scrollTop
          } = this.quill.root;
          if (this.linkRange) {
            this.quill.formatText(this.linkRange, 'link', value, emitter.default.sources.USER);
            delete this.linkRange;
          } else {
            this.restoreFocus();
            this.quill.format('link', value, emitter.default.sources.USER);
          }
          this.quill.root.scrollTop = scrollTop;
          break;
        }
      case 'video':
        {
          value = extractVideoUrl(value);
        }
      // eslint-disable-next-line no-fallthrough
      case 'formula':
        {
          if (!value) break;
          const range = this.quill.getSelection(true);
          if (range != null) {
            const index = range.index + range.length;
            this.quill.insertEmbed(index,
            // @ts-expect-error Fix me later
            this.root.getAttribute('data-mode'), value, emitter.default.sources.USER);
            if (this.root.getAttribute('data-mode') === 'formula') {
              this.quill.insertText(index + 1, ' ', emitter.default.sources.USER);
            }
            this.quill.setSelection(index + 2, emitter.default.sources.USER);
          }
          break;
        }
    }
    // @ts-expect-error Fix me later
    this.textbox.value = '';
    this.hide();
  }
}
function extractVideoUrl(url) {
  let match = url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtube\.com\/watch.*v=([a-zA-Z0-9_-]+)/) || url.match(/^(?:(https?):\/\/)?(?:(?:www|m)\.)?youtu\.be\/([a-zA-Z0-9_-]+)/);
  if (match) {
    return `${match[1] || 'https'}://www.youtube.com/embed/${match[2]}?showinfo=0`;
  }
  // eslint-disable-next-line no-cond-assign
  if (match = url.match(/^(?:(https?):\/\/)?(?:www\.)?vimeo\.com\/(\d+)/)) {
    return `${match[1] || 'https'}://player.vimeo.com/video/${match[2]}/`;
  }
  return url;
}
function fillSelect(select, values) {
  let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  values.forEach(value => {
    const option = document.createElement('option');
    if (value === defaultValue) {
      option.setAttribute('selected', 'selected');
    } else {
      option.setAttribute('value', String(value));
    }
    select.appendChild(option);
  });
}

exports.BaseTooltip = BaseTooltip;
exports.default = BaseTheme;
