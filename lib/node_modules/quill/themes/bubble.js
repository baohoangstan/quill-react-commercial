'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('../../lodash-es/_baseGetTag.js');
require('../../lodash-es/_baseToString.js');
require('../../lodash-es/_metaMap.js');
require('../../lodash-es/_root.js');
require('../../lodash-es/_LazyWrapper.js');
require('../../lodash-es/wrapperLodash.js');
require('../../lodash-es/_defineProperty.js');
require('../../lodash-es/assign.js');
require('../../lodash-es/assignIn.js');
require('../../lodash-es/assignInWith.js');
require('../../lodash-es/assignWith.js');
require('../../lodash-es/at.js');
require('../../lodash-es/attempt.js');
require('../../lodash-es/bind.js');
require('../../lodash-es/bindAll.js');
require('../../lodash-es/bindKey.js');
require('../../lodash-es/_createRound.js');
require('../../lodash-es/_baseClone.js');
require('../../lodash-es/_LodashWrapper.js');
require('../../lodash-es/_isFlattenable.js');
require('../../lodash-es/_Stack.js');
require('../../lodash-es/_SetCache.js');
require('../../lodash-es/_equalByTag.js');
require('../../lodash-es/isArguments.js');
require('../../lodash-es/isBuffer.js');
require('../../lodash-es/isTypedArray.js');
require('../../lodash-es/_getTag.js');
require('../../lodash-es/_stringToPath.js');
require('../../lodash-es/curry.js');
require('../../lodash-es/curryRight.js');
require('../../lodash-es/defaults.js');
require('../../lodash-es/defaultsDeep.js');
require('../../lodash-es/defer.js');
require('../../lodash-es/delay.js');
require('../../lodash-es/difference.js');
require('../../lodash-es/differenceBy.js');
require('../../lodash-es/differenceWith.js');
require('../../lodash-es/flow.js');
require('../../lodash-es/flowRight.js');
require('../../lodash-es/intersection.js');
require('../../lodash-es/intersectionBy.js');
require('../../lodash-es/intersectionWith.js');
require('../../lodash-es/invoke.js');
require('../../lodash-es/invokeMap.js');
require('../../lodash-es/isArrayBuffer.js');
require('../../lodash-es/isDate.js');
require('../../lodash-es/isPlainObject.js');
require('../../lodash-es/isFinite.js');
require('../../lodash-es/isMap.js');
require('../../lodash-es/_baseIsNative.js');
require('../../lodash-es/_coreJsData.js');
require('../../lodash-es/isRegExp.js');
require('../../lodash-es/isSet.js');
require('../../lodash-es/memoize.js');
var merge = require('../../lodash-es/merge.js');
require('../../lodash-es/mergeWith.js');
require('../../lodash-es/method.js');
require('../../lodash-es/methodOf.js');
require('../../lodash-es/toArray.js');
require('../../lodash-es/omit.js');
require('../../lodash-es/over.js');
require('../../lodash-es/overArgs.js');
require('../../lodash-es/overEvery.js');
require('../../lodash-es/overSome.js');
require('../../lodash-es/parseInt.js');
require('../../lodash-es/partial.js');
require('../../lodash-es/partialRight.js');
require('../../lodash-es/pick.js');
require('../../lodash-es/pull.js');
require('../../lodash-es/pullAt.js');
require('../../lodash-es/rearg.js');
require('../../lodash-es/sortBy.js');
require('../../lodash-es/union.js');
require('../../lodash-es/unionBy.js');
require('../../lodash-es/unionWith.js');
require('../../lodash-es/_createSet.js');
require('../../lodash-es/without.js');
require('../../lodash-es/wrapperAt.js');
require('../../lodash-es/xor.js');
require('../../lodash-es/xorBy.js');
require('../../lodash-es/xorWith.js');
require('../../lodash-es/zip.js');
require('../../lodash-es/zipWith.js');
require('../../lodash-es/lodash.default.js');
var emitter = require('../core/emitter.js');
var base = require('./base.js');
var selection = require('../core/selection.js');
var icons = require('../ui/icons.js');

const TOOLBAR_CONFIG = [['bold', 'italic', 'link'], [{
  header: 1
}, {
  header: 2
}, 'blockquote']];
class BubbleTooltip extends base.BaseTooltip {
  static TEMPLATE = ['<span class="ql-tooltip-arrow"></span>', '<div class="ql-tooltip-editor">', '<input type="text" data-formula="e=mc^2" data-link="https://quilljs.com" data-video="Embed URL">', '<a class="ql-close"></a>', '</div>'].join('');
  constructor(quill, bounds) {
    super(quill, bounds);
    this.quill.on(emitter.default.events.EDITOR_CHANGE, (type, range, oldRange, source) => {
      if (type !== emitter.default.events.SELECTION_CHANGE) return;
      if (range != null && range.length > 0 && source === emitter.default.sources.USER) {
        this.show();
        // Lock our width so we will expand beyond our offsetParent boundaries
        this.root.style.left = '0px';
        this.root.style.width = '';
        this.root.style.width = `${this.root.offsetWidth}px`;
        const lines = this.quill.getLines(range.index, range.length);
        if (lines.length === 1) {
          const bounds = this.quill.getBounds(range);
          if (bounds != null) {
            this.position(bounds);
          }
        } else {
          const lastLine = lines[lines.length - 1];
          const index = this.quill.getIndex(lastLine);
          const length = Math.min(lastLine.length() - 1, range.index + range.length - index);
          const indexBounds = this.quill.getBounds(new selection.Range(index, length));
          if (indexBounds != null) {
            this.position(indexBounds);
          }
        }
      } else if (document.activeElement !== this.textbox && this.quill.hasFocus()) {
        this.hide();
      }
    });
  }
  listen() {
    super.listen();
    // @ts-expect-error Fix me later
    this.root.querySelector('.ql-close').addEventListener('click', () => {
      this.root.classList.remove('ql-editing');
    });
    this.quill.on(emitter.default.events.SCROLL_OPTIMIZE, () => {
      // Let selection be restored by toolbar handlers before repositioning
      setTimeout(() => {
        if (this.root.classList.contains('ql-hidden')) return;
        const range = this.quill.getSelection();
        if (range != null) {
          const bounds = this.quill.getBounds(range);
          if (bounds != null) {
            this.position(bounds);
          }
        }
      }, 1);
    });
  }
  cancel() {
    this.show();
  }
  position(reference) {
    const shift = super.position(reference);
    const arrow = this.root.querySelector('.ql-tooltip-arrow');
    // @ts-expect-error
    arrow.style.marginLeft = '';
    if (shift !== 0) {
      // @ts-expect-error
      arrow.style.marginLeft = `${-1 * shift - arrow.offsetWidth / 2}px`;
    }
    return shift;
  }
}
class BubbleTheme extends base.default {
  constructor(quill, options) {
    if (options.modules.toolbar != null && options.modules.toolbar.container == null) {
      options.modules.toolbar.container = TOOLBAR_CONFIG;
    }
    super(quill, options);
    this.quill.container.classList.add('ql-bubble');
  }
  extendToolbar(toolbar) {
    // @ts-expect-error
    this.tooltip = new BubbleTooltip(this.quill, this.options.bounds);
    if (toolbar.container != null) {
      this.tooltip.root.appendChild(toolbar.container);
      this.buildButtons(toolbar.container.querySelectorAll('button'), icons.default);
      this.buildPickers(toolbar.container.querySelectorAll('select'), icons.default);
    }
  }
}
BubbleTheme.DEFAULTS = merge.default({}, base.default.DEFAULTS, {
  modules: {
    toolbar: {
      handlers: {
        link(value) {
          if (!value) {
            this.quill.format('link', false);
          } else {
            this.quill.theme.tooltip.edit();
          }
        }
      }
    }
  }
});

exports.BubbleTooltip = BubbleTooltip;
exports.default = BubbleTheme;
