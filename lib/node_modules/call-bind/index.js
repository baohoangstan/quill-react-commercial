'use strict';

var index = require('../../_virtual/index.js');
var index$1 = require('../function-bind/index.js');
var index$2 = require('../get-intrinsic/index.js');
var index$3 = require('../set-function-length/index.js');
var type = require('../es-errors/type.js');
var index$4 = require('../es-define-property/index.js');

(function (module) {

	var bind = index$1.default;
	var GetIntrinsic = index$2.default;
	var setFunctionLength = index$3.default;

	var $TypeError = type.default;
	var $apply = GetIntrinsic('%Function.prototype.apply%');
	var $call = GetIntrinsic('%Function.prototype.call%');
	var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

	var $defineProperty = index$4.default;
	var $max = GetIntrinsic('%Math.max%');

	module.exports = function callBind(originalFunction) {
		if (typeof originalFunction !== 'function') {
			throw new $TypeError('a function is required');
		}
		var func = $reflectApply(bind, $call, arguments);
		return setFunctionLength(
			func,
			1 + $max(0, originalFunction.length - (arguments.length - 1)),
			true
		);
	};

	var applyBind = function applyBind() {
		return $reflectApply(bind, $apply, arguments);
	};

	if ($defineProperty) {
		$defineProperty(module.exports, 'apply', { value: applyBind });
	} else {
		module.exports.apply = applyBind;
	}
} (index.__module));
