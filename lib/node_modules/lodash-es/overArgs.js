'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _apply = require('./_apply.js');
var _arrayMap = require('./_arrayMap.js');
var _baseFlatten = require('./_baseFlatten.js');
var _baseIteratee = require('./_baseIteratee.js');
var _baseRest = require('./_baseRest.js');
var _baseUnary = require('./_baseUnary.js');
var _castRest = require('./_castRest.js');
var isArray = require('./isArray.js');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Creates a function that invokes `func` with its arguments transformed.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Function
 * @param {Function} func The function to wrap.
 * @param {...(Function|Function[])} [transforms=[_.identity]]
 *  The argument transforms.
 * @returns {Function} Returns the new function.
 * @example
 *
 * function doubled(n) {
 *   return n * 2;
 * }
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var func = _.overArgs(function(x, y) {
 *   return [x, y];
 * }, [square, doubled]);
 *
 * func(9, 3);
 * // => [81, 6]
 *
 * func(10, 5);
 * // => [100, 10]
 */
var overArgs = _castRest.default(function(func, transforms) {
  transforms = (transforms.length == 1 && isArray.default(transforms[0]))
    ? _arrayMap.default(transforms[0], _baseUnary.default(_baseIteratee.default))
    : _arrayMap.default(_baseFlatten.default(transforms, 1), _baseUnary.default(_baseIteratee.default));

  var funcsLength = transforms.length;
  return _baseRest.default(function(args) {
    var index = -1,
        length = nativeMin(args.length, funcsLength);

    while (++index < length) {
      args[index] = transforms[index].call(this, args[index]);
    }
    return _apply.default(func, this, args);
  });
});

exports.default = overArgs;
