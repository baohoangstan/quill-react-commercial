'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _Symbol = require('./_Symbol.js');
var _copyArray = require('./_copyArray.js');
var _getTag = require('./_getTag.js');
var isArrayLike = require('./isArrayLike.js');
var isString = require('./isString.js');
var _iteratorToArray = require('./_iteratorToArray.js');
var _mapToArray = require('./_mapToArray.js');
var _setToArray = require('./_setToArray.js');
var _stringToArray = require('./_stringToArray.js');
var values = require('./values.js');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Built-in value references. */
var symIterator = _Symbol.default ? _Symbol.default.iterator : undefined;

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike.default(value)) {
    return isString.default(value) ? _stringToArray.default(value) : _copyArray.default(value);
  }
  if (symIterator && value[symIterator]) {
    return _iteratorToArray.default(value[symIterator]());
  }
  var tag = _getTag.default(value),
      func = tag == mapTag ? _mapToArray.default : (tag == setTag ? _setToArray.default : values.default);

  return func(value);
}

exports.default = toArray;
