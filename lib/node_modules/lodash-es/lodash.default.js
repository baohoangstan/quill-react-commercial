'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('./_baseGetTag.js');
var isObject = require('./isObject.js');
var toInteger = require('./toInteger.js');
var _arrayPush = require('./_arrayPush.js');
require('./_isFlattenable.js');
var isArray = require('./isArray.js');
require('./difference.js');
require('./differenceBy.js');
require('./differenceWith.js');
var _baseIteratee = require('./_baseIteratee.js');
require('./intersection.js');
require('./intersectionBy.js');
require('./intersectionWith.js');
var last = require('./last.js');
require('./pull.js');
require('./pullAt.js');
require('./_stringToPath.js');
require('./_baseToString.js');
var identity = require('./identity.js');
require('./union.js');
require('./unionBy.js');
require('./unionWith.js');
require('./_SetCache.js');
require('./_createSet.js');
require('./without.js');
require('./xor.js');
require('./xorBy.js');
require('./xorWith.js');
require('./zip.js');
require('./_defineProperty.js');
require('./zipWith.js');
var array_default = require('./array.default.js');
var _baseForOwn = require('./_baseForOwn.js');
var _arrayEach = require('./_arrayEach.js');
var keys = require('./keys.js');
require('./invokeMap.js');
var negate = require('./negate.js');
require('./_getTag.js');
require('./sortBy.js');
var collection_default = require('./collection.default.js');
require('./_root.js');
var date_default = require('./date.default.js');
require('./_metaMap.js');
var _createHybrid = require('./_createHybrid.js');
var _LazyWrapper = require('./_LazyWrapper.js');
var _realNames = require('./_realNames.js');
var wrapperLodash = require('./wrapperLodash.js');
require('./bind.js');
require('./bindKey.js');
require('./curry.js');
require('./curryRight.js');
require('./defer.js');
require('./delay.js');
require('./memoize.js');
require('./overArgs.js');
require('./partial.js');
require('./partialRight.js');
require('./rearg.js');
var _baseRest = require('./_baseRest.js');
var function_default = require('./function.default.js');
require('./_baseClone.js');
require('./isArguments.js');
require('./isArrayBuffer.js');
require('./isBuffer.js');
require('./isDate.js');
require('./isPlainObject.js');
require('./isTypedArray.js');
require('./_Stack.js');
require('./_equalByTag.js');
require('./isFinite.js');
require('./isMap.js');
require('./_baseIsNative.js');
require('./_coreJsData.js');
require('./isRegExp.js');
require('./isSet.js');
require('./toArray.js');
var lang_default = require('./lang.default.js');
require('./_createRound.js');
var math_default = require('./math.default.js');
var number_default = require('./number.default.js');
require('./assign.js');
require('./assignIn.js');
require('./assignInWith.js');
require('./assignWith.js');
require('./at.js');
require('./defaults.js');
require('./defaultsDeep.js');
var _baseFunctions = require('./_baseFunctions.js');
require('./invoke.js');
require('./merge.js');
require('./mergeWith.js');
require('./omit.js');
require('./pick.js');
var object_default = require('./object.default.js');
require('./wrapperAt.js');
var _LodashWrapper = require('./_LodashWrapper.js');
var thru = require('./thru.js');
var seq_default = require('./seq.default.js');
require('./parseInt.js');
require('./attempt.js');
var string_default = require('./string.default.js');
require('./bindAll.js');
require('./flow.js');
require('./flowRight.js');
require('./method.js');
require('./methodOf.js');
var mixin$1 = require('./mixin.js');
require('./over.js');
require('./overEvery.js');
require('./overSome.js');
var util_default = require('./util.default.js');
var _Symbol = require('./_Symbol.js');
var _baseInvoke = require('./_baseInvoke.js');
var _lazyClone = require('./_lazyClone.js');
var _lazyReverse = require('./_lazyReverse.js');
var _lazyValue = require('./_lazyValue.js');

/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="es" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** Used as the semantic version number. */
var VERSION = '4.17.21';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_KEY_FLAG = 2;

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG = 1,
    LAZY_WHILE_FLAG = 3;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/** Used for built-in method references. */
var arrayProto = Array.prototype,
    objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var symIterator = _Symbol.default ? _Symbol.default.iterator : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

// wrap `_.mixin` so it works when provided only one argument
var mixin = (function(func) {
  return function(object, source, options) {
    if (options == null) {
      var isObj = isObject.default(source),
          props = isObj && keys.default(source),
          methodNames = props && props.length && _baseFunctions.default(source, props);

      if (!(methodNames ? methodNames.length : isObj)) {
        options = source;
        source = object;
        object = this;
      }
    }
    return func(object, source, options);
  };
}(mixin$1.default));

// Add methods that return wrapped values in chain sequences.
wrapperLodash.default.after = function_default.default.after;
wrapperLodash.default.ary = function_default.default.ary;
wrapperLodash.default.assign = object_default.default.assign;
wrapperLodash.default.assignIn = object_default.default.assignIn;
wrapperLodash.default.assignInWith = object_default.default.assignInWith;
wrapperLodash.default.assignWith = object_default.default.assignWith;
wrapperLodash.default.at = object_default.default.at;
wrapperLodash.default.before = function_default.default.before;
wrapperLodash.default.bind = function_default.default.bind;
wrapperLodash.default.bindAll = util_default.default.bindAll;
wrapperLodash.default.bindKey = function_default.default.bindKey;
wrapperLodash.default.castArray = lang_default.default.castArray;
wrapperLodash.default.chain = seq_default.default.chain;
wrapperLodash.default.chunk = array_default.default.chunk;
wrapperLodash.default.compact = array_default.default.compact;
wrapperLodash.default.concat = array_default.default.concat;
wrapperLodash.default.cond = util_default.default.cond;
wrapperLodash.default.conforms = util_default.default.conforms;
wrapperLodash.default.constant = util_default.default.constant;
wrapperLodash.default.countBy = collection_default.default.countBy;
wrapperLodash.default.create = object_default.default.create;
wrapperLodash.default.curry = function_default.default.curry;
wrapperLodash.default.curryRight = function_default.default.curryRight;
wrapperLodash.default.debounce = function_default.default.debounce;
wrapperLodash.default.defaults = object_default.default.defaults;
wrapperLodash.default.defaultsDeep = object_default.default.defaultsDeep;
wrapperLodash.default.defer = function_default.default.defer;
wrapperLodash.default.delay = function_default.default.delay;
wrapperLodash.default.difference = array_default.default.difference;
wrapperLodash.default.differenceBy = array_default.default.differenceBy;
wrapperLodash.default.differenceWith = array_default.default.differenceWith;
wrapperLodash.default.drop = array_default.default.drop;
wrapperLodash.default.dropRight = array_default.default.dropRight;
wrapperLodash.default.dropRightWhile = array_default.default.dropRightWhile;
wrapperLodash.default.dropWhile = array_default.default.dropWhile;
wrapperLodash.default.fill = array_default.default.fill;
wrapperLodash.default.filter = collection_default.default.filter;
wrapperLodash.default.flatMap = collection_default.default.flatMap;
wrapperLodash.default.flatMapDeep = collection_default.default.flatMapDeep;
wrapperLodash.default.flatMapDepth = collection_default.default.flatMapDepth;
wrapperLodash.default.flatten = array_default.default.flatten;
wrapperLodash.default.flattenDeep = array_default.default.flattenDeep;
wrapperLodash.default.flattenDepth = array_default.default.flattenDepth;
wrapperLodash.default.flip = function_default.default.flip;
wrapperLodash.default.flow = util_default.default.flow;
wrapperLodash.default.flowRight = util_default.default.flowRight;
wrapperLodash.default.fromPairs = array_default.default.fromPairs;
wrapperLodash.default.functions = object_default.default.functions;
wrapperLodash.default.functionsIn = object_default.default.functionsIn;
wrapperLodash.default.groupBy = collection_default.default.groupBy;
wrapperLodash.default.initial = array_default.default.initial;
wrapperLodash.default.intersection = array_default.default.intersection;
wrapperLodash.default.intersectionBy = array_default.default.intersectionBy;
wrapperLodash.default.intersectionWith = array_default.default.intersectionWith;
wrapperLodash.default.invert = object_default.default.invert;
wrapperLodash.default.invertBy = object_default.default.invertBy;
wrapperLodash.default.invokeMap = collection_default.default.invokeMap;
wrapperLodash.default.iteratee = util_default.default.iteratee;
wrapperLodash.default.keyBy = collection_default.default.keyBy;
wrapperLodash.default.keys = keys.default;
wrapperLodash.default.keysIn = object_default.default.keysIn;
wrapperLodash.default.map = collection_default.default.map;
wrapperLodash.default.mapKeys = object_default.default.mapKeys;
wrapperLodash.default.mapValues = object_default.default.mapValues;
wrapperLodash.default.matches = util_default.default.matches;
wrapperLodash.default.matchesProperty = util_default.default.matchesProperty;
wrapperLodash.default.memoize = function_default.default.memoize;
wrapperLodash.default.merge = object_default.default.merge;
wrapperLodash.default.mergeWith = object_default.default.mergeWith;
wrapperLodash.default.method = util_default.default.method;
wrapperLodash.default.methodOf = util_default.default.methodOf;
wrapperLodash.default.mixin = mixin;
wrapperLodash.default.negate = negate.default;
wrapperLodash.default.nthArg = util_default.default.nthArg;
wrapperLodash.default.omit = object_default.default.omit;
wrapperLodash.default.omitBy = object_default.default.omitBy;
wrapperLodash.default.once = function_default.default.once;
wrapperLodash.default.orderBy = collection_default.default.orderBy;
wrapperLodash.default.over = util_default.default.over;
wrapperLodash.default.overArgs = function_default.default.overArgs;
wrapperLodash.default.overEvery = util_default.default.overEvery;
wrapperLodash.default.overSome = util_default.default.overSome;
wrapperLodash.default.partial = function_default.default.partial;
wrapperLodash.default.partialRight = function_default.default.partialRight;
wrapperLodash.default.partition = collection_default.default.partition;
wrapperLodash.default.pick = object_default.default.pick;
wrapperLodash.default.pickBy = object_default.default.pickBy;
wrapperLodash.default.property = util_default.default.property;
wrapperLodash.default.propertyOf = util_default.default.propertyOf;
wrapperLodash.default.pull = array_default.default.pull;
wrapperLodash.default.pullAll = array_default.default.pullAll;
wrapperLodash.default.pullAllBy = array_default.default.pullAllBy;
wrapperLodash.default.pullAllWith = array_default.default.pullAllWith;
wrapperLodash.default.pullAt = array_default.default.pullAt;
wrapperLodash.default.range = util_default.default.range;
wrapperLodash.default.rangeRight = util_default.default.rangeRight;
wrapperLodash.default.rearg = function_default.default.rearg;
wrapperLodash.default.reject = collection_default.default.reject;
wrapperLodash.default.remove = array_default.default.remove;
wrapperLodash.default.rest = function_default.default.rest;
wrapperLodash.default.reverse = array_default.default.reverse;
wrapperLodash.default.sampleSize = collection_default.default.sampleSize;
wrapperLodash.default.set = object_default.default.set;
wrapperLodash.default.setWith = object_default.default.setWith;
wrapperLodash.default.shuffle = collection_default.default.shuffle;
wrapperLodash.default.slice = array_default.default.slice;
wrapperLodash.default.sortBy = collection_default.default.sortBy;
wrapperLodash.default.sortedUniq = array_default.default.sortedUniq;
wrapperLodash.default.sortedUniqBy = array_default.default.sortedUniqBy;
wrapperLodash.default.split = string_default.default.split;
wrapperLodash.default.spread = function_default.default.spread;
wrapperLodash.default.tail = array_default.default.tail;
wrapperLodash.default.take = array_default.default.take;
wrapperLodash.default.takeRight = array_default.default.takeRight;
wrapperLodash.default.takeRightWhile = array_default.default.takeRightWhile;
wrapperLodash.default.takeWhile = array_default.default.takeWhile;
wrapperLodash.default.tap = seq_default.default.tap;
wrapperLodash.default.throttle = function_default.default.throttle;
wrapperLodash.default.thru = thru.default;
wrapperLodash.default.toArray = lang_default.default.toArray;
wrapperLodash.default.toPairs = object_default.default.toPairs;
wrapperLodash.default.toPairsIn = object_default.default.toPairsIn;
wrapperLodash.default.toPath = util_default.default.toPath;
wrapperLodash.default.toPlainObject = lang_default.default.toPlainObject;
wrapperLodash.default.transform = object_default.default.transform;
wrapperLodash.default.unary = function_default.default.unary;
wrapperLodash.default.union = array_default.default.union;
wrapperLodash.default.unionBy = array_default.default.unionBy;
wrapperLodash.default.unionWith = array_default.default.unionWith;
wrapperLodash.default.uniq = array_default.default.uniq;
wrapperLodash.default.uniqBy = array_default.default.uniqBy;
wrapperLodash.default.uniqWith = array_default.default.uniqWith;
wrapperLodash.default.unset = object_default.default.unset;
wrapperLodash.default.unzip = array_default.default.unzip;
wrapperLodash.default.unzipWith = array_default.default.unzipWith;
wrapperLodash.default.update = object_default.default.update;
wrapperLodash.default.updateWith = object_default.default.updateWith;
wrapperLodash.default.values = object_default.default.values;
wrapperLodash.default.valuesIn = object_default.default.valuesIn;
wrapperLodash.default.without = array_default.default.without;
wrapperLodash.default.words = string_default.default.words;
wrapperLodash.default.wrap = function_default.default.wrap;
wrapperLodash.default.xor = array_default.default.xor;
wrapperLodash.default.xorBy = array_default.default.xorBy;
wrapperLodash.default.xorWith = array_default.default.xorWith;
wrapperLodash.default.zip = array_default.default.zip;
wrapperLodash.default.zipObject = array_default.default.zipObject;
wrapperLodash.default.zipObjectDeep = array_default.default.zipObjectDeep;
wrapperLodash.default.zipWith = array_default.default.zipWith;

// Add aliases.
wrapperLodash.default.entries = object_default.default.toPairs;
wrapperLodash.default.entriesIn = object_default.default.toPairsIn;
wrapperLodash.default.extend = object_default.default.assignIn;
wrapperLodash.default.extendWith = object_default.default.assignInWith;

// Add methods to `lodash.prototype`.
mixin(wrapperLodash.default, wrapperLodash.default);

// Add methods that return unwrapped values in chain sequences.
wrapperLodash.default.add = math_default.default.add;
wrapperLodash.default.attempt = util_default.default.attempt;
wrapperLodash.default.camelCase = string_default.default.camelCase;
wrapperLodash.default.capitalize = string_default.default.capitalize;
wrapperLodash.default.ceil = math_default.default.ceil;
wrapperLodash.default.clamp = number_default.default.clamp;
wrapperLodash.default.clone = lang_default.default.clone;
wrapperLodash.default.cloneDeep = lang_default.default.cloneDeep;
wrapperLodash.default.cloneDeepWith = lang_default.default.cloneDeepWith;
wrapperLodash.default.cloneWith = lang_default.default.cloneWith;
wrapperLodash.default.conformsTo = lang_default.default.conformsTo;
wrapperLodash.default.deburr = string_default.default.deburr;
wrapperLodash.default.defaultTo = util_default.default.defaultTo;
wrapperLodash.default.divide = math_default.default.divide;
wrapperLodash.default.endsWith = string_default.default.endsWith;
wrapperLodash.default.eq = lang_default.default.eq;
wrapperLodash.default.escape = string_default.default.escape;
wrapperLodash.default.escapeRegExp = string_default.default.escapeRegExp;
wrapperLodash.default.every = collection_default.default.every;
wrapperLodash.default.find = collection_default.default.find;
wrapperLodash.default.findIndex = array_default.default.findIndex;
wrapperLodash.default.findKey = object_default.default.findKey;
wrapperLodash.default.findLast = collection_default.default.findLast;
wrapperLodash.default.findLastIndex = array_default.default.findLastIndex;
wrapperLodash.default.findLastKey = object_default.default.findLastKey;
wrapperLodash.default.floor = math_default.default.floor;
wrapperLodash.default.forEach = collection_default.default.forEach;
wrapperLodash.default.forEachRight = collection_default.default.forEachRight;
wrapperLodash.default.forIn = object_default.default.forIn;
wrapperLodash.default.forInRight = object_default.default.forInRight;
wrapperLodash.default.forOwn = object_default.default.forOwn;
wrapperLodash.default.forOwnRight = object_default.default.forOwnRight;
wrapperLodash.default.get = object_default.default.get;
wrapperLodash.default.gt = lang_default.default.gt;
wrapperLodash.default.gte = lang_default.default.gte;
wrapperLodash.default.has = object_default.default.has;
wrapperLodash.default.hasIn = object_default.default.hasIn;
wrapperLodash.default.head = array_default.default.head;
wrapperLodash.default.identity = identity.default;
wrapperLodash.default.includes = collection_default.default.includes;
wrapperLodash.default.indexOf = array_default.default.indexOf;
wrapperLodash.default.inRange = number_default.default.inRange;
wrapperLodash.default.invoke = object_default.default.invoke;
wrapperLodash.default.isArguments = lang_default.default.isArguments;
wrapperLodash.default.isArray = isArray.default;
wrapperLodash.default.isArrayBuffer = lang_default.default.isArrayBuffer;
wrapperLodash.default.isArrayLike = lang_default.default.isArrayLike;
wrapperLodash.default.isArrayLikeObject = lang_default.default.isArrayLikeObject;
wrapperLodash.default.isBoolean = lang_default.default.isBoolean;
wrapperLodash.default.isBuffer = lang_default.default.isBuffer;
wrapperLodash.default.isDate = lang_default.default.isDate;
wrapperLodash.default.isElement = lang_default.default.isElement;
wrapperLodash.default.isEmpty = lang_default.default.isEmpty;
wrapperLodash.default.isEqual = lang_default.default.isEqual;
wrapperLodash.default.isEqualWith = lang_default.default.isEqualWith;
wrapperLodash.default.isError = lang_default.default.isError;
wrapperLodash.default.isFinite = lang_default.default.isFinite;
wrapperLodash.default.isFunction = lang_default.default.isFunction;
wrapperLodash.default.isInteger = lang_default.default.isInteger;
wrapperLodash.default.isLength = lang_default.default.isLength;
wrapperLodash.default.isMap = lang_default.default.isMap;
wrapperLodash.default.isMatch = lang_default.default.isMatch;
wrapperLodash.default.isMatchWith = lang_default.default.isMatchWith;
wrapperLodash.default.isNaN = lang_default.default.isNaN;
wrapperLodash.default.isNative = lang_default.default.isNative;
wrapperLodash.default.isNil = lang_default.default.isNil;
wrapperLodash.default.isNull = lang_default.default.isNull;
wrapperLodash.default.isNumber = lang_default.default.isNumber;
wrapperLodash.default.isObject = isObject.default;
wrapperLodash.default.isObjectLike = lang_default.default.isObjectLike;
wrapperLodash.default.isPlainObject = lang_default.default.isPlainObject;
wrapperLodash.default.isRegExp = lang_default.default.isRegExp;
wrapperLodash.default.isSafeInteger = lang_default.default.isSafeInteger;
wrapperLodash.default.isSet = lang_default.default.isSet;
wrapperLodash.default.isString = lang_default.default.isString;
wrapperLodash.default.isSymbol = lang_default.default.isSymbol;
wrapperLodash.default.isTypedArray = lang_default.default.isTypedArray;
wrapperLodash.default.isUndefined = lang_default.default.isUndefined;
wrapperLodash.default.isWeakMap = lang_default.default.isWeakMap;
wrapperLodash.default.isWeakSet = lang_default.default.isWeakSet;
wrapperLodash.default.join = array_default.default.join;
wrapperLodash.default.kebabCase = string_default.default.kebabCase;
wrapperLodash.default.last = last.default;
wrapperLodash.default.lastIndexOf = array_default.default.lastIndexOf;
wrapperLodash.default.lowerCase = string_default.default.lowerCase;
wrapperLodash.default.lowerFirst = string_default.default.lowerFirst;
wrapperLodash.default.lt = lang_default.default.lt;
wrapperLodash.default.lte = lang_default.default.lte;
wrapperLodash.default.max = math_default.default.max;
wrapperLodash.default.maxBy = math_default.default.maxBy;
wrapperLodash.default.mean = math_default.default.mean;
wrapperLodash.default.meanBy = math_default.default.meanBy;
wrapperLodash.default.min = math_default.default.min;
wrapperLodash.default.minBy = math_default.default.minBy;
wrapperLodash.default.stubArray = util_default.default.stubArray;
wrapperLodash.default.stubFalse = util_default.default.stubFalse;
wrapperLodash.default.stubObject = util_default.default.stubObject;
wrapperLodash.default.stubString = util_default.default.stubString;
wrapperLodash.default.stubTrue = util_default.default.stubTrue;
wrapperLodash.default.multiply = math_default.default.multiply;
wrapperLodash.default.nth = array_default.default.nth;
wrapperLodash.default.noop = util_default.default.noop;
wrapperLodash.default.now = date_default.default.now;
wrapperLodash.default.pad = string_default.default.pad;
wrapperLodash.default.padEnd = string_default.default.padEnd;
wrapperLodash.default.padStart = string_default.default.padStart;
wrapperLodash.default.parseInt = string_default.default.parseInt;
wrapperLodash.default.random = number_default.default.random;
wrapperLodash.default.reduce = collection_default.default.reduce;
wrapperLodash.default.reduceRight = collection_default.default.reduceRight;
wrapperLodash.default.repeat = string_default.default.repeat;
wrapperLodash.default.replace = string_default.default.replace;
wrapperLodash.default.result = object_default.default.result;
wrapperLodash.default.round = math_default.default.round;
wrapperLodash.default.sample = collection_default.default.sample;
wrapperLodash.default.size = collection_default.default.size;
wrapperLodash.default.snakeCase = string_default.default.snakeCase;
wrapperLodash.default.some = collection_default.default.some;
wrapperLodash.default.sortedIndex = array_default.default.sortedIndex;
wrapperLodash.default.sortedIndexBy = array_default.default.sortedIndexBy;
wrapperLodash.default.sortedIndexOf = array_default.default.sortedIndexOf;
wrapperLodash.default.sortedLastIndex = array_default.default.sortedLastIndex;
wrapperLodash.default.sortedLastIndexBy = array_default.default.sortedLastIndexBy;
wrapperLodash.default.sortedLastIndexOf = array_default.default.sortedLastIndexOf;
wrapperLodash.default.startCase = string_default.default.startCase;
wrapperLodash.default.startsWith = string_default.default.startsWith;
wrapperLodash.default.subtract = math_default.default.subtract;
wrapperLodash.default.sum = math_default.default.sum;
wrapperLodash.default.sumBy = math_default.default.sumBy;
wrapperLodash.default.template = string_default.default.template;
wrapperLodash.default.times = util_default.default.times;
wrapperLodash.default.toFinite = lang_default.default.toFinite;
wrapperLodash.default.toInteger = toInteger.default;
wrapperLodash.default.toLength = lang_default.default.toLength;
wrapperLodash.default.toLower = string_default.default.toLower;
wrapperLodash.default.toNumber = lang_default.default.toNumber;
wrapperLodash.default.toSafeInteger = lang_default.default.toSafeInteger;
wrapperLodash.default.toString = lang_default.default.toString;
wrapperLodash.default.toUpper = string_default.default.toUpper;
wrapperLodash.default.trim = string_default.default.trim;
wrapperLodash.default.trimEnd = string_default.default.trimEnd;
wrapperLodash.default.trimStart = string_default.default.trimStart;
wrapperLodash.default.truncate = string_default.default.truncate;
wrapperLodash.default.unescape = string_default.default.unescape;
wrapperLodash.default.uniqueId = util_default.default.uniqueId;
wrapperLodash.default.upperCase = string_default.default.upperCase;
wrapperLodash.default.upperFirst = string_default.default.upperFirst;

// Add aliases.
wrapperLodash.default.each = collection_default.default.forEach;
wrapperLodash.default.eachRight = collection_default.default.forEachRight;
wrapperLodash.default.first = array_default.default.head;

mixin(wrapperLodash.default, (function() {
  var source = {};
  _baseForOwn.default(wrapperLodash.default, function(func, methodName) {
    if (!hasOwnProperty.call(wrapperLodash.default.prototype, methodName)) {
      source[methodName] = func;
    }
  });
  return source;
}()), { 'chain': false });

/**
 * The semantic version number.
 *
 * @static
 * @memberOf _
 * @type {string}
 */
wrapperLodash.default.VERSION = VERSION;
(wrapperLodash.default.templateSettings = string_default.default.templateSettings).imports._ = wrapperLodash.default;

// Assign default placeholders.
_arrayEach.default(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
  wrapperLodash.default[methodName].placeholder = wrapperLodash.default;
});

// Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
_arrayEach.default(['drop', 'take'], function(methodName, index) {
  _LazyWrapper.default.prototype[methodName] = function(n) {
    n = n === undefined ? 1 : nativeMax(toInteger.default(n), 0);

    var result = (this.__filtered__ && !index)
      ? new _LazyWrapper.default(this)
      : this.clone();

    if (result.__filtered__) {
      result.__takeCount__ = nativeMin(n, result.__takeCount__);
    } else {
      result.__views__.push({
        'size': nativeMin(n, MAX_ARRAY_LENGTH),
        'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
      });
    }
    return result;
  };

  _LazyWrapper.default.prototype[methodName + 'Right'] = function(n) {
    return this.reverse()[methodName](n).reverse();
  };
});

// Add `LazyWrapper` methods that accept an `iteratee` value.
_arrayEach.default(['filter', 'map', 'takeWhile'], function(methodName, index) {
  var type = index + 1,
      isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

  _LazyWrapper.default.prototype[methodName] = function(iteratee) {
    var result = this.clone();
    result.__iteratees__.push({
      'iteratee': _baseIteratee.default(iteratee),
      'type': type
    });
    result.__filtered__ = result.__filtered__ || isFilter;
    return result;
  };
});

// Add `LazyWrapper` methods for `_.head` and `_.last`.
_arrayEach.default(['head', 'last'], function(methodName, index) {
  var takeName = 'take' + (index ? 'Right' : '');

  _LazyWrapper.default.prototype[methodName] = function() {
    return this[takeName](1).value()[0];
  };
});

// Add `LazyWrapper` methods for `_.initial` and `_.tail`.
_arrayEach.default(['initial', 'tail'], function(methodName, index) {
  var dropName = 'drop' + (index ? '' : 'Right');

  _LazyWrapper.default.prototype[methodName] = function() {
    return this.__filtered__ ? new _LazyWrapper.default(this) : this[dropName](1);
  };
});

_LazyWrapper.default.prototype.compact = function() {
  return this.filter(identity.default);
};

_LazyWrapper.default.prototype.find = function(predicate) {
  return this.filter(predicate).head();
};

_LazyWrapper.default.prototype.findLast = function(predicate) {
  return this.reverse().find(predicate);
};

_LazyWrapper.default.prototype.invokeMap = _baseRest.default(function(path, args) {
  if (typeof path == 'function') {
    return new _LazyWrapper.default(this);
  }
  return this.map(function(value) {
    return _baseInvoke.default(value, path, args);
  });
});

_LazyWrapper.default.prototype.reject = function(predicate) {
  return this.filter(negate.default(_baseIteratee.default(predicate)));
};

_LazyWrapper.default.prototype.slice = function(start, end) {
  start = toInteger.default(start);

  var result = this;
  if (result.__filtered__ && (start > 0 || end < 0)) {
    return new _LazyWrapper.default(result);
  }
  if (start < 0) {
    result = result.takeRight(-start);
  } else if (start) {
    result = result.drop(start);
  }
  if (end !== undefined) {
    end = toInteger.default(end);
    result = end < 0 ? result.dropRight(-end) : result.take(end - start);
  }
  return result;
};

_LazyWrapper.default.prototype.takeRightWhile = function(predicate) {
  return this.reverse().takeWhile(predicate).reverse();
};

_LazyWrapper.default.prototype.toArray = function() {
  return this.take(MAX_ARRAY_LENGTH);
};

// Add `LazyWrapper` methods to `lodash.prototype`.
_baseForOwn.default(_LazyWrapper.default.prototype, function(func, methodName) {
  var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
      isTaker = /^(?:head|last)$/.test(methodName),
      lodashFunc = wrapperLodash.default[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
      retUnwrapped = isTaker || /^find/.test(methodName);

  if (!lodashFunc) {
    return;
  }
  wrapperLodash.default.prototype[methodName] = function() {
    var value = this.__wrapped__,
        args = isTaker ? [1] : arguments,
        isLazy = value instanceof _LazyWrapper.default,
        iteratee = args[0],
        useLazy = isLazy || isArray.default(value);

    var interceptor = function(value) {
      var result = lodashFunc.apply(wrapperLodash.default, _arrayPush.default([value], args));
      return (isTaker && chainAll) ? result[0] : result;
    };

    if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
      // Avoid lazy use if the iteratee has a "length" value other than `1`.
      isLazy = useLazy = false;
    }
    var chainAll = this.__chain__,
        isHybrid = !!this.__actions__.length,
        isUnwrapped = retUnwrapped && !chainAll,
        onlyLazy = isLazy && !isHybrid;

    if (!retUnwrapped && useLazy) {
      value = onlyLazy ? value : new _LazyWrapper.default(this);
      var result = func.apply(value, args);
      result.__actions__.push({ 'func': thru.default, 'args': [interceptor], 'thisArg': undefined });
      return new _LodashWrapper.default(result, chainAll);
    }
    if (isUnwrapped && onlyLazy) {
      return func.apply(this, args);
    }
    result = this.thru(interceptor);
    return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
  };
});

// Add `Array` methods to `lodash.prototype`.
_arrayEach.default(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
  var func = arrayProto[methodName],
      chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
      retUnwrapped = /^(?:pop|shift)$/.test(methodName);

  wrapperLodash.default.prototype[methodName] = function() {
    var args = arguments;
    if (retUnwrapped && !this.__chain__) {
      var value = this.value();
      return func.apply(isArray.default(value) ? value : [], args);
    }
    return this[chainName](function(value) {
      return func.apply(isArray.default(value) ? value : [], args);
    });
  };
});

// Map minified method names to their real names.
_baseForOwn.default(_LazyWrapper.default.prototype, function(func, methodName) {
  var lodashFunc = wrapperLodash.default[methodName];
  if (lodashFunc) {
    var key = lodashFunc.name + '';
    if (!hasOwnProperty.call(_realNames.default, key)) {
      _realNames.default[key] = [];
    }
    _realNames.default[key].push({ 'name': methodName, 'func': lodashFunc });
  }
});

_realNames.default[_createHybrid.default(undefined, WRAP_BIND_KEY_FLAG).name] = [{
  'name': 'wrapper',
  'func': undefined
}];

// Add methods to `LazyWrapper`.
_LazyWrapper.default.prototype.clone = _lazyClone.default;
_LazyWrapper.default.prototype.reverse = _lazyReverse.default;
_LazyWrapper.default.prototype.value = _lazyValue.default;

// Add chain sequence methods to the `lodash` wrapper.
wrapperLodash.default.prototype.at = seq_default.default.at;
wrapperLodash.default.prototype.chain = seq_default.default.wrapperChain;
wrapperLodash.default.prototype.commit = seq_default.default.commit;
wrapperLodash.default.prototype.next = seq_default.default.next;
wrapperLodash.default.prototype.plant = seq_default.default.plant;
wrapperLodash.default.prototype.reverse = seq_default.default.reverse;
wrapperLodash.default.prototype.toJSON = wrapperLodash.default.prototype.valueOf = wrapperLodash.default.prototype.value = seq_default.default.value;

// Add lazy aliases.
wrapperLodash.default.prototype.first = wrapperLodash.default.prototype.head;

if (symIterator) {
  wrapperLodash.default.prototype[symIterator] = seq_default.default.toIterator;
}

exports.default = wrapperLodash.default;
